version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - backend_data:${BACKEND_UPLOAD_DIR}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - langflow
      - postgres
      - qdrant
      - ollama
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  langflow:
    build:
      context: ./langflow
      dockerfile: Dockerfile
    container_name: ${LANGFLOW_CONTAINER_NAME}
    ports:
      - "${LANGFLOW_PORT}:${LANGFLOW_PORT}"
    volumes:
      - langflow_data:/root/.langflow
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${LANGFLOW_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    hostname: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ${QDRANT_CONTAINER_NAME:-qdrant}
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network
    # ports:
    #   - "${QDRANT_PORT:-6333}:6333"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    container_name: ${OLLAMA_CONTAINER_NAME:-ollama}
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    # ports:
    #   - "${OLLAMA_PORT:-11434}:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer
    container_name: ${ADMINER_CONTAINER_NAME}
    ports:
      - "${ADMINER_PORT}:8080"
    env_file:
      - .env
    environment:
      - ADMINER_DEFAULT_SERVER=${POSTGRES_HOST}
      - ADMINER_DESIGN=flat
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - postgres

volumes:
  langflow_data:
    driver: local
  backend_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local

networks:
  app-network:
    driver: bridge